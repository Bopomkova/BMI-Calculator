Please name variables well
ty

- let is used for variables that can be redefined, const is oviously used for constants
- You can use let and const without specifying a value if you just want to declare the variable as something that exists

    let variableHere;
    variableHere = valueHere;
    let variableHere = valueHere;

    const constant = valueHere; 

- Don't declare variables using var, just don't

- For values, put a text value in quotes, put something like a number or true/false without quotes

    variableHere = 7;
    variableHere = true;
    variableHere = "textHere";

- Use a value of null to indicate no value

- You can use math operations while defining variables

    variableHere = 7 + 7;
    variableHere = 7 + variableHere2;

- You can also use math to add strings, but there's a better way using back quotes and ${variableHere} to mention a variable

    let variableHere = "textHere";
    const variableHere2 = `moreTextHere ${variableHere}`;
    console.log(variableHere2);

    Will display "moreTextHere textHere"

- You can use functions to do things

    function functionName(argumentNameHere){
        console.log(`textHere ${argumentNameHere}`)
    
    functionName(argumentValueHere);

    Will display "textHere argumentValueHere" in the console

- return sends an output outside of a function

    return x + y;

- You can put a function inside of a function, but please don't put a function inside itself
- If you define functionA inside of functionB, you cannot use functionA outside of functionB
- This is because nothing escapes the curly brackets
- If functionA is defined differently inside and outside of functionB, its definition in functionB will take priority while in functionB

- An array is a list of things, you can even put an array inside of another array

    const arr = [3, true, "yellow"];
    console.log(arr[0]) /*This would display the 0th term of arr, which is 3*/

    const arr2 = [3, true, [5, -7, "cake"]]

- You can use .length to check an array's length

    const arr = [1, 2, 3, 4]
    
    console.log(arr.length) /*This would display 3, the length of the array*/

- You can use .push, .pop, .unshift, and .shift to change the terms of an array

    arr.push("newTerm")

- The => (arrow) function automatically returns the contents
- .forEach() performs a function on each term which meets its parameters

- .map creates a new array based performing a specified function on every element in a different array

    const mappedArr = originalArr.map((element) =>{
        functionA
    })

- Objects are another way of storing information.

    const objectA = {
        varA: 1,
        varB: "apples",
        varC: false,
    }

- You can also put functions inside of objects.

    const objectA = {
        varA: 1,
        varB: "apples",
        addVarA: function (){
            this.varA++;
        },
    }
- "this" means refer to the object, and "++" means increase by 1, so "this.varA++;" means increase the object's value of varA by 1
- You can also refer to object information outside of the object.

    objectA.varA